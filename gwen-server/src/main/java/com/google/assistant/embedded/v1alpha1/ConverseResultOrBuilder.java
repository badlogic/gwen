// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/assistant/embedded/v1alpha1/embedded_assistant.proto

package com.google.assistant.embedded.v1alpha1;

public interface ConverseResultOrBuilder extends
// @@protoc_insertion_point(interface_extends:google.assistant.embedded.v1alpha1.ConverseResult)
	com.google.protobuf.MessageOrBuilder {

	/**
	 * <pre>
	 * *Output-only* The recognized transcript of what the user said.
	 * </pre>
	 *
	 * <code>string spoken_request_text = 1;</code> */
	java.lang.String getSpokenRequestText ();

	/**
	 * <pre>
	 * *Output-only* The recognized transcript of what the user said.
	 * </pre>
	 *
	 * <code>string spoken_request_text = 1;</code> */
	com.google.protobuf.ByteString getSpokenRequestTextBytes ();

	/**
	 * <pre>
	 * *Output-only* The text of the assistant's spoken response. This is only
	 * returned for an IFTTT action.
	 * </pre>
	 *
	 * <code>string spoken_response_text = 2;</code> */
	java.lang.String getSpokenResponseText ();

	/**
	 * <pre>
	 * *Output-only* The text of the assistant's spoken response. This is only
	 * returned for an IFTTT action.
	 * </pre>
	 *
	 * <code>string spoken_response_text = 2;</code> */
	com.google.protobuf.ByteString getSpokenResponseTextBytes ();

	/**
	 * <pre>
	 * *Output-only* State information for subsequent `ConverseRequest`. This
	 * value should be saved in the client and returned in the
	 * `conversation_state` with the next `ConverseRequest`. (The client does not
	 * need to interpret or otherwise use this value.) There is no need to save
	 * this information across device restarts.
	 * </pre>
	 *
	 * <code>bytes conversation_state = 3;</code> */
	com.google.protobuf.ByteString getConversationState ();

	/**
	 * <pre>
	 * *Output-only* Specifies the mode of the microphone after this `Converse`
	 * RPC is processed.
	 * </pre>
	 *
	 * <code>.google.assistant.embedded.v1alpha1.ConverseResult.MicrophoneMode microphone_mode = 4;</code> */
	int getMicrophoneModeValue ();

	/**
	 * <pre>
	 * *Output-only* Specifies the mode of the microphone after this `Converse`
	 * RPC is processed.
	 * </pre>
	 *
	 * <code>.google.assistant.embedded.v1alpha1.ConverseResult.MicrophoneMode microphone_mode = 4;</code> */
	com.google.assistant.embedded.v1alpha1.ConverseResult.MicrophoneMode getMicrophoneMode ();

	/**
	 * <pre>
	 * *Output-only* Updated volume level. The value will be 0 or omitted
	 * (indicating no change) unless a voice command such as "Increase the volume"
	 * or "Set volume level 4" was recognized, in which case the value will be
	 * between 1 and 100 (corresponding to the new volume level of 1% to 100%).
	 * Typically, a client should use this volume level when playing the
	 * `audio_out` data, and retain this value as the current volume level and
	 * supply it in the `AudioOutConfig` of the next `ConverseRequest`. (Some
	 * clients may also implement other ways to allow the current volume level to
	 * be changed, for example, by providing a knob that the user can turn.)
	 * </pre>
	 *
	 * <code>int32 volume_percentage = 5;</code> */
	int getVolumePercentage ();
}
