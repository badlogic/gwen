import org.gradle.api.XmlProvider
import org.gradle.api.artifacts.maven.MavenDeployment

apply plugin: 'maven'
apply plugin: 'signing'

ext.packaging = 'jar'

def isDevBuild
def isCiBuild
def isReleaseBuild

def sonatypeRepositoryUrl

println("Configuring Maven for " + project.ext.pomGroup + ":" + project.ext.pomName + ":" + project.ext.pomVersion);

//set build variables based on build type (release, continuous integration, development)
if(hasProperty("release")) {
	isReleaseBuild = true
	sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
	println "Performing release build"
} else if (hasProperty("snapshot")) {
	isCiBuild = true
	project.ext.pomVersion += "-SNAPSHOT"
	sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
	println "Performing snapshot build"
} else {
	isDevBuild = true
	println "Performing local build"
}

repositories {
	mavenCentral()
}

task artifactDocs(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

task artifactSources(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

artifacts {
	archives jar
	archives artifactDocs
	archives artifactSources
}

if(isReleaseBuild) {
	signing {
		sign configurations.archives
	}
} else {
	task signArchives {
		// do nothing
	}
}

uploadArchives {
	repositories {
		if (isDevBuild) {
			mavenLocal()
		}
		else {
			mavenDeployer {
				if(isReleaseBuild) {
					beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
				}

				repository(url: sonatypeRepositoryUrl) {
					authentication(userName: sonatypeUsername, password: sonatypePassword)
				}

				pom.groupId = project.ext.pomGroup
				pom.version = project.ext.pomVersion
				pom.packaging = 'jar'

				pom.project {
					name project.ext.pomName
					description project.ext.pomDescription
					url 'https://github.com/badlogic/gwen'

					scm {
						url 'scm:git@github.com:badloguc/gwen.git'
						connection 'scm:git@github.com:badlogic/gwen.git'
						developerConnection 'scm:git@github.com:badlogic/gwen.git'
					}

					licenses {
						license {
							name 'MIT License'
							url 'https://opensource.org/licenses/MIT'
							distribution 'repo'
						}
					}

					developers {
						developer {
							id 'badlogic'
							name 'Mario Zechner'
						}
						developer {
							id 'nathansweet'
							name 'Nathan Sweet'
						}
					}
				}
			}
		}
	}
}